# ============================================================================
# Configuration
# ============================================================================

PROJECT_ROOT = os.getenv("PROJECT_ROOT", "./agent_workspace")
PG_PASSWORD = os.getenv("PG_PASSWORD", "password")
LOGGING_DB_URI = f"postgresql://postgres:{PG_PASSWORD}@192.168.0.33:5432/llm_logs_db"
OLLAMA_MODEL = os.getenv("OLLAMA_MODEL", "gpt-oss:20b")
OLLAMA_HOST = os.getenv("OLLAMA_HOST", "http://localhost:11434")

# ============================================================================
# Database Models (Logging DB)
# ============================================================================


class Base(DeclarativeBase):
    pass


class ConversationLog(Base):
    __tablename__ = "llm_conversation_logs"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    session_id: Mapped[str] = mapped_column(String(36), index=True)
    timestamp: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    stage: Mapped[str] = mapped_column(String(50))
    role: Mapped[str] = mapped_column(String(20))
    content: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    thinking: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    metadata: Mapped[Optional[dict]] = mapped_column(JSON, nullable=True)


class ToolCallLog(Base):
    __tablename__ = "llm_tool_call_logs"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    session_id: Mapped[str] = mapped_column(String(36), index=True)
    timestamp: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    tool_name: Mapped[str] = mapped_column(String(100))
    arguments: Mapped[dict] = mapped_column(JSON)
    result: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    error: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    retry_count: Mapped[int] = mapped_column(Integer, default=0)
    duration_ms: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)


class ContextLog(Base):
    __tablename__ = "llm_context_logs"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    session_id: Mapped[str] = mapped_column(String(36), index=True)
    timestamp: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    goal: Mapped[str] = mapped_column(Text)
    notes: Mapped[str] = mapped_column(Text)
    iteration: Mapped[int] = mapped_column(Integer)
    status: Mapped[str] = mapped_column(String(20))


class SessionStore(Base):
    __tablename__ = "llm_sessions"

    session_id: Mapped[str] = mapped_column(String(36), primary_key=True)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )
    goal: Mapped[str] = mapped_column(Text)
    status: Mapped[str] = mapped_column(String(20))
    notes: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
    iteration: Mapped[int] = mapped_column(Integer, default=0)


class GlobalContext(Base):
    __tablename__ = "global_contexts"

    id: Mapped[int] = mapped_column(Integer, primary_key=True, autoincrement=True)
    key: Mapped[str] = mapped_column(String(100), unique=True, index=True)
    value: Mapped[str] = mapped_column(Text)
    created_at: Mapped[datetime] = mapped_column(DateTime, default=datetime.utcnow)
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, default=datetime.utcnow, onupdate=datetime.utcnow
    )


# ============================================================================
# Pydantic Schemas
# ============================================================================


class ToolResult(BaseModel):
    success: bool
    result: Optional[str] = None
    error: Optional[str] = None


class FileMetadata(BaseModel):
    name: str
    path: str
    size: int
    is_dir: bool
    modified: datetime


class ContextState(BaseModel):
    goal: str
    notes: str = ""
    iteration: int = 0
    active: bool = True


class DatabaseConfig(BaseModel):
    name: str
    uri: str
    readonly_tables: list[str] = Field(default_factory=list)
    blocked_tables: list[str] = Field(default_factory=list)


# ============================================================================
# Agent Context Manager
# ============================================================================


@dataclass
class AgentContext:
    session_id: str
    goal: str
    notes: str = ""
    iteration: int = 0
    active: bool = True
    global_context: dict[str, str] = field(default_factory=dict)

    def update_goal(self, new_goal: str):
        self.goal = new_goal
        self.notes = ""
        self.iteration = 0

    def update_notes(self, new_notes: str):
        self.notes = new_notes
        self.iteration += 1

    def clear(self):
        self.notes = ""
        self.iteration = 0

    def to_prompt(self) -> str:
        prompt = f"GOAL: {self.goal}\n\n"

        if self.global_context:
            prompt += "GLOBAL CONTEXT (static information for reference):\n"
            for key, value in self.global_context.items():
                prompt += f"  {key}: {value}\n"
            prompt += "\n"

        if self.notes:
            prompt += f"YOUR NOTES FROM PREVIOUS STEP:\n{self.notes}\n\n"

        prompt += f"Iteration: {self.iteration}\n\n"
        prompt += "Continue working on the goal. Use tools as needed. Update your notes for the next iteration."
        return prompt
